# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from neo_msgs/RelayBoardV2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RelayBoardV2(genpy.Message):
  _md5sum = "83afb76bbd47cf5ea0d7c64c621b54fb"
  _type = "neo_msgs/RelayBoardV2"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message holds specific data available from Neobotix RelayBoardV2

std_msgs/Header header

# Possible Communication States
int16 CS_NOT_ESTABLISHED = 0 		# configuration process has not been started
int16 CS_CONFIGURATION_FAILED = 1	# configuration process failed
int16 CS_OK = 2 			# communication is OK
int16 CS_LOST = 3 			# comminication was lost
int16 CS_ERROR = 4			# comminication has errors

# Possible Charging States
int16 CHS_NOTCHARGING = 0 		# no charging in progress; can be started with service /RelayBoardV2/StartCharging
int16 CHS_START_CHARGING = 1		# RelayBoardV2 is starting charging process
int16 CHS_CHARGING = 2 			# charging in progress; can be stopped with service /RelayBoardV2/StopCharging
int16 CHS_NO_CHARGER = 3 		# charging has been started but no charger was connected; this aborts charging
int16 CHS_BRAKES_OPEN = 4 		# brakes have been opened while charging; this aborts charging
int16 CHS_EMSTOP = 5 			# EMSTOP has been issued while charging; this aborts charging
int16 CHS_ABORT = 6 	   		# charging abort by host system
int16 CHS_FINISHED = 7 			# charging finished

#
bool[16] relayboardv2_state		# Shows state for all possible errors
					# relayboardv2_state[0] if true no errors; if false check other fields
					# relayboardv2_state[1] if true charging relay error; check robot hardware
					# relayboardv2_state[2] if true release brakes button failed; check robot hardware
					# relayboardv2_state[3] if true motor error; check robot hardware
					# relayboardv2_state[4] if true safety relay error; check robot hardware
					# relayboardv2_state[5] if true Leistungsrelais error; check robot hardware
					# relayboardv2_state[6] if true EMStop system error; check robot hardware
					# relayboardv2_state[7] reserved
					# relayboardv2_state[8] reserved
					# relayboardv2_state[9] reserved
					# relayboardv2_state[10] reserved
					# relayboardv2_state[11] reserved
					# relayboardv2_state[12] reserved
					# relayboardv2_state[13] reserved
					# relayboardv2_state[14] reserved
					# relayboardv2_state[15] reserved


int16 communication_state		# values see above

int16 charging_state			# values see above

int16 temperature			# temperature on relayboardv2 [Â°C]

float32 battery_voltage			# battery voltage [V]

float32 charging_current		# charging current [A] if not charging = 0

bool[4] relay_states			# state for each relay on RelayBoardV2; True = Active; False = Inactive
					# relay_states[0] is our charging relay
					# other are free to use

bool[8] keypad				# state for each key on keypad; True = Pressed
					# keypad[0] info button
					# keypad[1] home button
					# keypad[2] start button
					# keypad[3] stop button
					# keypad[4] release brakes button
					# keypad[5] on demand digital input
					# keypad[6] on demand digital input
					# keypad[7] on demand digital input

bool shutdown				# if true host system is asked to shut down



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  CS_NOT_ESTABLISHED = 0
  CS_CONFIGURATION_FAILED = 1
  CS_OK = 2
  CS_LOST = 3
  CS_ERROR = 4
  CHS_NOTCHARGING = 0
  CHS_START_CHARGING = 1
  CHS_CHARGING = 2
  CHS_NO_CHARGER = 3
  CHS_BRAKES_OPEN = 4
  CHS_EMSTOP = 5
  CHS_ABORT = 6
  CHS_FINISHED = 7

  __slots__ = ['header','relayboardv2_state','communication_state','charging_state','temperature','battery_voltage','charging_current','relay_states','keypad','shutdown']
  _slot_types = ['std_msgs/Header','bool[16]','int16','int16','int16','float32','float32','bool[4]','bool[8]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,relayboardv2_state,communication_state,charging_state,temperature,battery_voltage,charging_current,relay_states,keypad,shutdown

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RelayBoardV2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.relayboardv2_state is None:
        self.relayboardv2_state = [False] * 16
      if self.communication_state is None:
        self.communication_state = 0
      if self.charging_state is None:
        self.charging_state = 0
      if self.temperature is None:
        self.temperature = 0
      if self.battery_voltage is None:
        self.battery_voltage = 0.
      if self.charging_current is None:
        self.charging_current = 0.
      if self.relay_states is None:
        self.relay_states = [False] * 4
      if self.keypad is None:
        self.keypad = [False] * 8
      if self.shutdown is None:
        self.shutdown = False
    else:
      self.header = std_msgs.msg.Header()
      self.relayboardv2_state = [False] * 16
      self.communication_state = 0
      self.charging_state = 0
      self.temperature = 0
      self.battery_voltage = 0.
      self.charging_current = 0.
      self.relay_states = [False] * 4
      self.keypad = [False] * 8
      self.shutdown = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_16B().pack(*self.relayboardv2_state))
      _x = self
      buff.write(_get_struct_3h2f().pack(_x.communication_state, _x.charging_state, _x.temperature, _x.battery_voltage, _x.charging_current))
      buff.write(_get_struct_4B().pack(*self.relay_states))
      buff.write(_get_struct_8B().pack(*self.keypad))
      _x = self.shutdown
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.relayboardv2_state = _get_struct_16B().unpack(str[start:end])
      self.relayboardv2_state = list(map(bool, self.relayboardv2_state))
      _x = self
      start = end
      end += 14
      (_x.communication_state, _x.charging_state, _x.temperature, _x.battery_voltage, _x.charging_current,) = _get_struct_3h2f().unpack(str[start:end])
      start = end
      end += 4
      self.relay_states = _get_struct_4B().unpack(str[start:end])
      self.relay_states = list(map(bool, self.relay_states))
      start = end
      end += 8
      self.keypad = _get_struct_8B().unpack(str[start:end])
      self.keypad = list(map(bool, self.keypad))
      start = end
      end += 1
      (self.shutdown,) = _get_struct_B().unpack(str[start:end])
      self.shutdown = bool(self.shutdown)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.relayboardv2_state.tostring())
      _x = self
      buff.write(_get_struct_3h2f().pack(_x.communication_state, _x.charging_state, _x.temperature, _x.battery_voltage, _x.charging_current))
      buff.write(self.relay_states.tostring())
      buff.write(self.keypad.tostring())
      _x = self.shutdown
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 16
      self.relayboardv2_state = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.relayboardv2_state = list(map(bool, self.relayboardv2_state))
      _x = self
      start = end
      end += 14
      (_x.communication_state, _x.charging_state, _x.temperature, _x.battery_voltage, _x.charging_current,) = _get_struct_3h2f().unpack(str[start:end])
      start = end
      end += 4
      self.relay_states = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=4)
      self.relay_states = list(map(bool, self.relay_states))
      start = end
      end += 8
      self.keypad = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=8)
      self.keypad = list(map(bool, self.keypad))
      start = end
      end += 1
      (self.shutdown,) = _get_struct_B().unpack(str[start:end])
      self.shutdown = bool(self.shutdown)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3h2f = None
def _get_struct_3h2f():
    global _struct_3h2f
    if _struct_3h2f is None:
        _struct_3h2f = struct.Struct("<3h2f")
    return _struct_3h2f
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
