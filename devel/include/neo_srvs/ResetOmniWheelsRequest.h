// Generated by gencpp from file neo_srvs/ResetOmniWheelsRequest.msg
// DO NOT EDIT!


#ifndef NEO_SRVS_MESSAGE_RESETOMNIWHEELSREQUEST_H
#define NEO_SRVS_MESSAGE_RESETOMNIWHEELSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace neo_srvs
{
template <class ContainerAllocator>
struct ResetOmniWheelsRequest_
{
  typedef ResetOmniWheelsRequest_<ContainerAllocator> Type;

  ResetOmniWheelsRequest_()
    : steer_angles_rad()  {
    }
  ResetOmniWheelsRequest_(const ContainerAllocator& _alloc)
    : steer_angles_rad(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _steer_angles_rad_type;
  _steer_angles_rad_type steer_angles_rad;





  typedef boost::shared_ptr< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetOmniWheelsRequest_

typedef ::neo_srvs::ResetOmniWheelsRequest_<std::allocator<void> > ResetOmniWheelsRequest;

typedef boost::shared_ptr< ::neo_srvs::ResetOmniWheelsRequest > ResetOmniWheelsRequestPtr;
typedef boost::shared_ptr< ::neo_srvs::ResetOmniWheelsRequest const> ResetOmniWheelsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator1> & lhs, const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.steer_angles_rad == rhs.steer_angles_rad;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator1> & lhs, const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace neo_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d89344c94316a386e3c391ced0645d9f";
  }

  static const char* value(const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd89344c94316a386ULL;
  static const uint64_t static_value2 = 0xe3c391ced0645d9fULL;
};

template<class ContainerAllocator>
struct DataType< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "neo_srvs/ResetOmniWheelsRequest";
  }

  static const char* value(const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] steer_angles_rad\n"
;
  }

  static const char* value(const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steer_angles_rad);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetOmniWheelsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::neo_srvs::ResetOmniWheelsRequest_<ContainerAllocator>& v)
  {
    s << indent << "steer_angles_rad[]" << std::endl;
    for (size_t i = 0; i < v.steer_angles_rad.size(); ++i)
    {
      s << indent << "  steer_angles_rad[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.steer_angles_rad[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NEO_SRVS_MESSAGE_RESETOMNIWHEELSREQUEST_H
